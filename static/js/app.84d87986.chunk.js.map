{"version":3,"sources":["colors.js","App.js"],"names":["theme","SCREEN_HEIGHT","Dimensions","get","height","SCREEN_WIDTH","width","App","useState","config","setConfig","editModal","setEditModal","targetTodoText","onChangeTodoText","targetTodoKey","setTargetTodoKey","toDo","setTodo","toDoList","setTodoList","useEffect","loadWorkingState","loadTodos","closeEditModal","a","async","AsyncStorage","getItem","JSON","parse","existingWorking","working","saveTodos","payload","setItem","stringify","saveWorkingState","selectedThemeColor","btn","color","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","newConfig","Text","btnTxt","TextInput","onChangeText","onSubmitEditing","newTodoList","Date","now","complete","placeholder","returnKeyType","input","value","ScrollView","Object","keys","map","toDoKey","key","toDoText","toDoTextComplete","toDoInteraction","completeTodo","MaterialCommunityIcons","name","size","Platform","OS","confirm","Alert","alert","text","deleteTodo","Modal","animationType","onRequestClose","transparent","visible","centeredContainer","editModalContainer","editModalInput","editBtnContainer","editModalBtn","btnConfirm","btnCancel","StyleSheet","create","backgroundColor","fontSize","fontWeight","flex","justifyContent","alignItems","marginTop","paddingHorizontal","flexDirection","marginLeft","padding","borderRadius","elevation","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","minHeight","textAlign","paddingVertical","marginVertical","marginBottom","textDecorationLine"],"mappings":"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","file":"static/js/app.84d87986.chunk.js","sourcesContent":["export const theme = {\n  cancel: \"tomato\",\n  confirm: \"green\",\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  white: \"#fff\",\n};\n","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, TextInput, ScrollView, Alert, Modal, Dimensions, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { theme } from './colors';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'; \n\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst STORAGE_TODOLIST = \"@toDoList\"\nconst STORAGE_WORKING = \"@workingState\"\n\nexport default function App() {\n  const [config, setConfig] = useState({});\n  const [editModal, setEditModal] = useState(false);\n  const [targetTodoText, onChangeTodoText] = useState(\"\");\n  const [targetTodoKey, setTargetTodoKey] = useState(\"\");\n  const [toDo, setTodo] = useState(\"\");\n  const [toDoList, setTodoList] = useState({});\n\n  useEffect(() => {\n    loadWorkingState();\n    loadTodos();\n  }, []);\n\n  const addTodo = async () => {\n    if (!toDo) return;\n\n    const newTodoList = {\n      ...toDoList,\n      [Date.now()]: {\n        complete: false,\n        toDo,\n        working: config.working,\n      },\n    };\n\n    setTodoList(newTodoList);\n    await saveTodos(newTodoList);\n    setTodo(\"\");\n  };\n  const closeEditModal = () => {\n    setEditModal(!editModal);\n    setTargetTodoKey(\"\");\n  };\n  const completeTodo = (key) => {\n    const newTodoList = { ...toDoList };\n    newTodoList[key].complete = !newTodoList[key].complete;\n    setTodoList(newTodoList);\n    saveTodos(newTodoList);\n\n  };\n  const deleteTodo = (key) => {\n    if (Platform.OS === \"web\") {\n      const input = confirm(`Are you sure to delete this todo: ${toDoList[key].toDo}?`);\n      if (input) {\n        const newTodoList = { ...toDoList };\n        delete newTodoList[key];\n        setTodoList(newTodoList);\n        saveTodos(newTodoList);\n      }\n    } else {\n      Alert.alert(\"Delete a Todo\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Proceed\",\n          onPress : () => {\n            const newTodoList = { ...toDoList };\n            delete newTodoList[key];\n            setTodoList(newTodoList);\n            saveTodos(newTodoList);\n          },\n        },\n      ]);\n    }\n  };\n  const loadTodos = async () => {\n    const toDoList = await AsyncStorage.getItem(STORAGE_TODOLIST);\n    if (toDoList) setTodoList(JSON.parse(toDoList));\n  };\n  const loadWorkingState = async () => {\n    const existingWorking = await AsyncStorage.getItem(STORAGE_WORKING);\n    const working = typeof existingWorking === \"string\" ? JSON.parse(existingWorking).working : true\n    setConfig({ ...config, working });\n  };\n  const onChangeText = (payload) => setTodo(payload);\n  const saveTodos = async (payload) => await AsyncStorage.setItem(STORAGE_TODOLIST, JSON.stringify(payload));\n  const saveWorkingState = async (payload) => await AsyncStorage.setItem(STORAGE_WORKING, JSON.stringify(payload));\n  const selectedThemeColor = (btn) => {\n    if (config.working && btn !== 'work' || !config.working && btn === 'work') {\n      return { color: theme.grey };\n    }\n    return { color: theme.white };\n  };\n  const updateTodo = () => {\n    const newTodoList = { ...toDoList };\n    newTodoList[targetTodoKey].toDo = targetTodoText;\n    setTodoList(newTodoList);\n    saveTodos(newTodoList);\n    closeEditModal();\n  };\n  const travel = () => {\n    const newConfig = { ...config, working: false };\n    setConfig(newConfig);\n    saveWorkingState(newConfig);\n  }\n  const work = () => {\n    const newConfig = { ...config, working: true };\n    setConfig(newConfig);\n    saveWorkingState(newConfig);\n  }\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={[styles.btnTxt, selectedThemeColor('work')]}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={[styles.btnTxt, selectedThemeColor('travel')]}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          onChangeText={onChangeText}\n          onSubmitEditing={addTodo}\n          placeholder={config.working ? \"Add a work\" : \"Where do you want to go?\"}\n          returnKeyType=\"done\"\n          style={styles.input}\n          value={toDo}\n        />\n        <ScrollView>\n          {Object.keys(toDoList).map(toDoKey => (\n            toDoList[toDoKey].working === config.working ? (\n              <View style={styles.toDo} key={toDoKey}>\n                <Text style={[styles.toDoText, toDoList[toDoKey].complete && styles.toDoTextComplete]}>\n                  {toDoList[toDoKey].toDo}\n                </Text>\n                <View style={styles.toDoInteraction}>\n                  <TouchableOpacity onPress={() => completeTodo(toDoKey)}>\n                    <MaterialCommunityIcons\n                      name={toDoList[toDoKey].complete ? \"reload\" : \"checkbox-marked-circle\"}\n                      size={24}\n                      color=\"green\"\n                    />\n                  </TouchableOpacity>\n                  <TouchableOpacity onPress={() => {\n                    setEditModal(!editModal);\n                    setTargetTodoKey(toDoKey);\n                  }}>\n                    <MaterialCommunityIcons name=\"circle-edit-outline\" size={24} color=\"orange\" />\n                  </TouchableOpacity>\n                  <TouchableOpacity onPress={() => deleteTodo(toDoKey)}>\n                    <MaterialCommunityIcons name=\"close-circle\" size={24} color=\"red\" />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : null\n          ))}\n        </ScrollView>\n      </View>\n      <Modal\n        animationType=\"fade\"\n        onRequestClose={closeEditModal}\n        transparent={true}\n        visible={editModal}\n      >\n        <View style={styles.centeredContainer}>\n          <View style={styles.editModalContainer}>\n            <Text>Edit Todo: {toDoList[targetTodoKey]?.toDo || \"\"}</Text>\n            <TextInput\n              onChangeText={onChangeTodoText}\n              placeholder=\"Please enter your new todo:\"\n              style={styles.editModalInput}\n              value={targetTodoText}\n            >\n            </TextInput>\n            <View style={styles.editBtnContainer}>\n              <TouchableOpacity onPress={updateTodo}>\n                <Text style={[styles.editModalBtn, styles.btnConfirm]}>Update</Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={closeEditModal}>\n                <Text style={[styles.editModalBtn, styles.btnCancel]}>Cancel</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  btnConfirm: {\n    backgroundColor: theme.confirm,\n  },\n  btnCancel: {\n    backgroundColor: theme.cancel,\n  },\n  btnTxt: {\n    color: \"white\",\n    fontSize: 35,\n    fontWeight: \"600\",\n  },\n  centeredContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  editBtnContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    width: \"100%\",\n    flex: 1,\n  },\n  editModalBtn: {\n    marginLeft: 10,\n    padding: 15,\n    borderRadius: 15,\n    elevation: 4,\n  },\n  editModalContainer: {\n    margin: 20,\n    backgroundColor: theme.white,\n    borderRadius: 15,\n    padding: 10,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n    width: SCREEN_WIDTH * 0.8,\n    minHeight: SCREEN_HEIGHT * 0.3,\n  },\n  editModalInput: {\n    textAlign: \"center\",\n    width: \"100%\",\n    flex: 2,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent:'space-between',\n    marginTop: 50,\n  },\n  input: {\n    backgroundColor: theme.white,\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 16,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoInteraction: {\n    flexDirection: \"row\",\n  },\n  toDoText: {\n    color: theme.white,\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  toDoTextComplete: {\n    textDecorationLine: 'line-through',\n    color: \"darkgrey\",\n  },\n});\n"],"sourceRoot":""}